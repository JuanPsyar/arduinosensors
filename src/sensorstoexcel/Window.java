package sensorstoexcel;

import com.panamahitek.PanamaHitek_Arduino;
import com.panamahitek.ArduinoException;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import jssc.SerialPortException;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class Window extends javax.swing.JFrame {

    PanamaHitek_Arduino Arduino = new PanamaHitek_Arduino();
    int Slot = 1;
    String[] parts;
    DefaultTableModel dataGSR;
    DefaultTableModel dataEMG;
    Rectangle r;
    int Lecturas = 0;
    Date fecha = new Date();
    File archivoGSR;
    File archivoEMG;
    FileWriter escribirGSR;
    FileWriter escribirEMG;
    int numeroprueba = 0;
    String datosArduino = "";
    boolean State = false;
    Calendar Calendario = Calendar.getInstance();
    Integer indiceGSR = 0;
    Double timStampGSR = 0.0;
    Integer indiceEMG = 0;
    Double timStampEMG = 0.0;
    Properties props = new Properties();
    File fichero;
    int ensayo = 1;
    boolean cambioVol = false;
    Double timeInicioGSR = 0.0;
    Double timeInicioEMG = 0.0;

    final static String MSSQL_DRIVER = "org.apache.derby.jdbc.EmbeddedDriver";
    final static String MSSQL_JDBC_URL = "jdbc:derby://localhost:1527/sensors";
    final static String MSSQL_USERNAME = "jp";
    final static String MSSQL_PASSWORD = "admin";
    final static String MSSQL_SCHEMA = "JP";
    Conexion conDB = new Conexion();

    //Método que constamente escucha el puerto del Arduino para capturar los datos del sensor GSR
    //una vez que los obtiene los envia a almacenar en una tabla
    SerialPortEventListener evento = new SerialPortEventListener() {

        public void serialEvent(SerialPortEvent spe) {
            try {
                if (Arduino.isMessageAvailable()) {
                    if (!datosArduino.isEmpty()) {
                        actualizarTableLogs();
                    }
                    datosArduino = Arduino.printMessage();
                }
            } catch (ArduinoException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SerialPortException ex) {
                Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    };

    //Método para inicializar el archivo de propiedades y textos en botones y combo-box
    private void inicializarValores() {
        try {
            //Cargar el archivo de propiedades
            FileInputStream descriptions = new FileInputStream("C:\\Users\\Juan Pablo\\Documents\\MDS\\TFM\\CODE\\GSR\\SensorsToExcel\\Java\\SensorsToExcel\\src\\sensorstoexcel\\definitions.properties");
            props.load(descriptions);
            props.list(System.out);
            descriptions.close();

            dataGSR = (DefaultTableModel) gsrTable.getModel();
            dataEMG = (DefaultTableModel) emgTable.getModel();
            //Definimos el texto de los botones 
            StartStop.setText(props.getProperty("textoBoton") + String.valueOf(ensayo));
            ExcelExport.setVisible(false);
            //crearlogs();
            //Definimos la ruta del archivo de propiedades
            OrdenEmociones.setText(props.getProperty(PruebaTipo.getSelectedItem().toString()).replace("%", "-"));
            cargarUsuarios();
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //al inicialiar la clase se establece la conexión con Arduino y se crean los logs para almacenar los datos
    public Window() {

        try {
            initComponents();
            inicializarValores();

//            en esta línea se hace la conexión a Arduino
            Arduino.arduinoRXTX("COM4", 9600, evento);
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StartStop = new javax.swing.JButton();
        ExcelExport = new javax.swing.JButton();
        gsrScrollPane = new javax.swing.JScrollPane();
        gsrTable = new javax.swing.JTable();
        emgScrollPane = new javax.swing.JScrollPane();
        emgTable = new javax.swing.JTable();
        TableClean = new javax.swing.JButton();
        CreateChunksAuBT = new javax.swing.JButton();
        PruebaTipo = new javax.swing.JComboBox();
        OrdenEmociones = new javax.swing.JLabel();
        Voluntario = new javax.swing.JComboBox();
        CreateFileVol = new javax.swing.JButton();
        newUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StartStop.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        StartStop.setLabel("");
        StartStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartStopActionPerformed(evt);
            }
        });

        ExcelExport.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        ExcelExport.setText("Exportar a Excel");
        ExcelExport.setEnabled(false);
        ExcelExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcelExportActionPerformed(evt);
            }
        });

        gsrTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Timestamp", "GSR"
            }
        ));
        gsrTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        gsrTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gsrScrollPane.setViewportView(gsrTable);

        emgTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Timestamp", "EMG"
            }
        ));
        emgTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        emgScrollPane.setViewportView(emgTable);

        TableClean.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        TableClean.setText("Limpiar Tablas");
        TableClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TableCleanActionPerformed(evt);
            }
        });

        CreateChunksAuBT.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        CreateChunksAuBT.setText("CrearFicheroAuBT");
        CreateChunksAuBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateChunksAuBTActionPerformed(evt);
            }
        });

        PruebaTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Prueba1", "Prueba2", "Prueba3" }));
        PruebaTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PruebaTipoActionPerformed(evt);
            }
        });

        Voluntario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VoluntarioActionPerformed(evt);
            }
        });

        CreateFileVol.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        CreateFileVol.setText("CrearFicheroVol");
        CreateFileVol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateFileVolActionPerformed(evt);
            }
        });

        newUser.setText("Nuevo Voluntario");
        newUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PruebaTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OrdenEmociones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Voluntario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(newUser))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(gsrScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(emgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TableClean, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE)
                                    .addComponent(StartStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(70, 70, 70)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(CreateFileVol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(CreateChunksAuBT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ExcelExport, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(0, 19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Voluntario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PruebaTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emgScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(gsrScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OrdenEmociones, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(285, 285, 285)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CreateFileVol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(StartStop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TableClean)
                    .addComponent(CreateChunksAuBT))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ExcelExport)
                .addContainerGap())
        );

        OrdenEmociones.getAccessibleContext().setAccessibleName("OrdenEmotions");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Esta función envia una señal al Arduino para que se dejen de leer los datos de los sensores
    private void EnviarSenal(String dato) {
        try {
            Arduino.sendData(dato);
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void crearlogs() {
        try {
            //se crea el fichero del paciente 
            String carpetaVol = Voluntario.getSelectedItem().toString();
            fichero = new File(props.getProperty("RutaLogs") + "/" + carpetaVol);
            fichero.mkdirs();
            //String ruta = "C:/Users/Juan Pablo/Documents/MDS/TFM/Pruebas/DATOS/arduino/";
            //String aniomesdia = String.valueOf(fecha.getYear()) + String.valueOf(fecha.getMonth()) + String.valueOf(fecha.getDay());
            String idArchivo = carpetaVol.replace("voluntario", props.getProperty("inicialArchivo"));
            String inicNomArchivo = "/" + idArchivo + "_" + aniomesdia() + "_";
            String finNomArchivo = StartStop.getText().trim().replace("Ensayo", "en") + props.getProperty("extension");
//            fecha = Date.from(Instant.now());
//            String hora = String.valueOf(fecha.getHours()) + String.valueOf(fecha.getMinutes()) + String.valueOf(fecha.getSeconds());
            archivoGSR = new File(fichero.getAbsolutePath() + inicNomArchivo + "GSR" + finNomArchivo);
            archivoEMG = new File(fichero.getAbsolutePath() + inicNomArchivo + "EMG" + finNomArchivo);
            escribirGSR = new FileWriter(archivoGSR, true);
            escribirEMG = new FileWriter(archivoEMG, true);
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /*
     Método para almacenar los valores obtenidos del sensor en una tabla que posteriormente será 
     almacenada en un excel, al mismo tiempo escribe en un log dentro de una ubicación del disco duro. 
     */

    public void actualizarTableLogs() {
        try {
            String identificador = "";
            System.out.println("data: " + datosArduino);
            String tokenCSV = props.getProperty("TokenData");
            parts = datosArduino.split(props.getProperty("TokenID"));
            if (parts.length > 0) {
                identificador = parts[0];               //la parte inicial de la trama es capturada con el identificador de datos
                //en esta parte se desglosa la trama según el token y se almacena según el identificador en la tabla seleccionada
                String[] celdas = parts[1].split(tokenCSV);
                if (celdas.length > 0) {
                    if (!(dataGSR.getRowCount() > 0)) {
                        timeInicioGSR = Double.parseDouble(celdas[0]);
                    }
                    if (!(dataEMG.getRowCount() > 0)) {
                        timeInicioEMG = Double.parseDouble(celdas[0]);
                    }
                    switch (identificador) {
                        case "GSR":
                            dataGSR.addRow(new Object[]{Double.parseDouble(celdas[0]) - timeInicioGSR, celdas[1]});
                            escribirGSR.write(Double.parseDouble(celdas[0]) - timeInicioGSR + tokenCSV + celdas[1] + "\r\n");           //en esta sección se escribe en los logs
                            break;
                        case "EMG":
                            dataEMG.addRow(new Object[]{Double.parseDouble(celdas[0]) - timeInicioEMG, celdas[1]});
                            escribirEMG.write(Double.parseDouble(celdas[0]) - timeInicioEMG + tokenCSV + celdas[1] + "\r\n");           //en esta sección se escribe en los logs
                            break;
                        default:
                            break;
                    }
                }

                //mover el cursor de la tabla de datos automáticamente 
                switch (identificador) {
                    case "GSR":
                        r = gsrTable.getCellRect(gsrTable.getRowCount() - 1, 0, true);
                        gsrScrollPane.getViewport().scrollRectToVisible(r);
                        break;
                    case "EMG":
                        r = emgTable.getCellRect(emgTable.getRowCount() - 1, 0, true);
                        emgScrollPane.getViewport().scrollRectToVisible(r);
                        break;
                    default:
                        break;
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //Método que borra todos los datos de las tablas dentro de la aplicación y de pantalla 
    private void LimpiarTablas(DefaultTableModel tablalimpiar) {
        if (tablalimpiar.getRowCount() > 0) {
            for (int i = tablalimpiar.getRowCount() - 1; i >= 0; i--) {
                tablalimpiar.removeRow(i);
            }
        }
    }

    //Esta función comienza o detiene la recolección de datos en la pantalla de la aplicación
    //para ello llama a la función EnviarSenal()
    private void StartStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartStopActionPerformed
        try {
            if (State == true) {
                State = false;
                EnviarSenal("0");           //se desactiva ya la recolección de la data
                escribirGSR.close();
                escribirEMG.close();
                ensayo++;
                if (!CreateChunksAuBT.isEnabled()) {
                    CreateChunksAuBT.setEnabled(true);
                }
                //se inicializa el texto con el número de ensayo
                StartStop.setText(props.getProperty("textoBoton") + String.valueOf(ensayo));
                Voluntario.setEnabled(true);
                datosArduino = "";
            } else {
                State = true;
                //se crean los logs para almacenar los valores 
                crearlogs();
                StartStop.setText("Finalizar Ensayo #" + ensayo);
                EnviarSenal("1");           //se activa ya la recolección de la data para sacar la media comparativa para los valores del GSR                                
                Voluntario.setEnabled(false);
            }

        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_StartStopActionPerformed
    /*
     Método mediante el cual se genera un archivo excel con los datos recolectados
     */

    public void FicheroExcel(String input) {
        double tiempoinicio = Double.parseDouble(gsrTable.getValueAt(0, 0).toString());
        double tiempofin = Double.parseDouble(gsrTable.getValueAt(dataGSR.getRowCount() - 1, 0).toString());
        double tiempototal = (tiempofin - tiempoinicio) / 1000;

        HSSFWorkbook libro = new HSSFWorkbook();
        HSSFSheet hoja = libro.createSheet("Datos GSR");
        HSSFRow fila = hoja.createRow(0);
        HSSFCell celda = fila.createCell(0);
        celda.setCellValue("Time S/M: "); //título 
        celda = fila.createCell(1);
        celda.setCellValue(String.valueOf(tiempototal) + "/" + String.format("%1.2f", (tiempototal / 60)));
        // Se colocan los encabezados
        fila = hoja.createRow(1);
        celda = fila.createCell(0);
        celda.setCellValue("Milisegundo");
        celda = fila.createCell(1);
        celda.setCellValue("GSR");

        for (int i = 2; i < dataGSR.getRowCount(); i++) {
            fila = hoja.createRow(i); //se crea la fila
            for (int j = 0; j <= 1; j++) {
                celda = fila.createCell(j); //se crea la celda
                if (j == 0) {
                    celda.setCellValue(Integer.parseInt(gsrTable.getValueAt(i, j).toString())); //se le asigna el valor
                } else {
                    celda.setCellValue(Integer.parseInt(gsrTable.getValueAt(i, j).toString()));
                }
            }
        }
        try {
            FileOutputStream Fichero = new FileOutputStream(input);
            libro.write(Fichero); //Se general el fichero
            Fichero.close(); //Se cierra el archivo
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //Método del botón para importar los datos a una tabla en excel 
    private void ExcelExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcelExportActionPerformed
        javax.swing.JFileChooser Ventana = new javax.swing.JFileChooser();
        String ruta = "";
        try {
            if (Ventana.showSaveDialog(null) == Ventana.APPROVE_OPTION) {
                ruta = Ventana.getSelectedFile().getAbsolutePath() + ".xls";
                FicheroExcel(ruta);
            }
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ExcelExportActionPerformed

    //Función del botón Limpiar Tablas
    private void TableCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TableCleanActionPerformed
        LimpiarTablas(dataGSR);
        LimpiarTablas(dataEMG);
    }//GEN-LAST:event_TableCleanActionPerformed

    //Método para obtener el número de Log a almacenarse en el disco, en base a la fecha y la hora
    private String aniomesdia() {
        String anio = Integer.toString(Calendario.get(Calendar.YEAR));
        String mes = Integer.toString(Calendario.get(Calendar.MONTH));
        String dia = Integer.toString(Calendario.get(Calendar.DAY_OF_MONTH));
        String encabezado = anio + mes + dia;
        return encabezado;
    }

    //Método para crear los directorios donde se almacenarán los valores obtenidos de los sensores en el Arduino
    //y que posteriromente se usarán para el programa AuBT
    private void CreateChunksAuBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateChunksAuBTActionPerformed
        // TODO add your handling code here:java 
        try {
            if (dataEMG.getRowCount() > 0 && dataGSR.getRowCount() > 0) {
                EnviarSenal("0");          //se deshabilita la recolección de datos y el botón para recolectarlos            
                //se definen variables para realizar los cortes en la tabla con los datos GSR y EMG
                timStampEMG = Double.parseDouble(dataEMG.getValueAt(0, 0).toString());
                timStampGSR = Double.parseDouble(dataGSR.getValueAt(0, 0).toString());
                String pruebaNum = PruebaTipo.getSelectedItem().toString();
                //props.list(System.out);
                String directorio = props.getProperty(pruebaNum);
                String extension = props.getProperty("extension");
                //desglosa la propiedad alegria%miedo%ira%sorpresa%tristeza%asco según la selección en el comboBox
                String[] sentimentalDir = directorio.split("%");

                String aniomesdia = aniomesdia();
                String ruta = props.getProperty("RutaFicheros");
                //String ruta = "C:/Users/Juan Pablo/Documents/MDS/TFM/Pruebas/DATOS/datosaubt/";
                Double emotionTime = Double.parseDouble(props.getProperty("tiempoemocion"));
                //para prueba se utilizará la siguiente matriz
                //DefaultTableModel Pruebamatriz = matrizprueba();
                //for (int i = 0; i < sentimentalDir.length; i++) {         
                for (String sentimentalDir1 : sentimentalDir) {       //sugerencia de Java 
                    String emotionDir = props.getProperty(sentimentalDir1);
                    //    String emotionDir = props.getProperty(sentimentalDir[i]);
                    fichero = new File(ruta + aniomesdia + "/" + emotionDir);
                    fichero.mkdirs();
                    archivoGSR = new File(fichero.getAbsolutePath() + "/GSR" + extension);
                    archivoEMG = new File(fichero.getAbsolutePath() + "/EMG" + extension);
                    escribirLogsAuBT(emotionTime + timStampGSR, emotionTime + timStampEMG);
                    //escribirLogs(Pruebamatriz, emotionTime + timStampGSR);                    
                }
                CreateChunksAuBT.setEnabled(false);         //deshabilitamos el botón de Creación de Fichero
                State = true;                             //Con esto se cambia el valor del fichero
                LimpiarTablas(dataGSR);
                LimpiarTablas(dataEMG);
                indiceGSR = 0;
                indiceEMG = 0;
            } else {
                JOptionPane.showMessageDialog(null, "No existen datos para crear ficheros");
            }

        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CreateChunksAuBTActionPerformed

    private void escribirLogsAuBT(Double intervaloGSR, Double intervaloEMG) {
        //private void escribirLogsAuBT(DefaultTableModel matriz, Double intervaloEmocion) {
        try {
            escribirGSR = new FileWriter(archivoGSR, true);
            escribirEMG = new FileWriter(archivoEMG, true);
            //comprobamos si se está empezando la recolección de datos

            //Empezamos a ingresar los valores en el log de datos GSR
            for (int i = indiceGSR; i < dataGSR.getRowCount(); i++) {
                if (Double.parseDouble(dataGSR.getValueAt(i, 0).toString()) <= intervaloGSR) {
                    escribirGSR.write(dataGSR.getValueAt(i, 1) + "\r\n");
                } else {
                    indiceGSR = i;
                    timStampGSR = Double.parseDouble(dataGSR.getValueAt(i, 0).toString());
                    i = dataGSR.getRowCount();
                }
            }
            //Empezamos a ingresar los valores en el log de datos EMG
            for (int i = indiceEMG; i < dataEMG.getRowCount(); i++) {
                if (Double.parseDouble(dataEMG.getValueAt(i, 0).toString()) <= intervaloEMG) {
                    escribirEMG.write(dataEMG.getValueAt(i, 1) + "\r\n");
                } else {
                    indiceEMG = i;
                    timStampEMG = Double.parseDouble(dataEMG.getValueAt(i, 0).toString());
                    i = dataEMG.getRowCount();
                }
            }
            escribirGSR.close();
            escribirEMG.close();
        } catch (IOException ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void PruebaTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PruebaTipoActionPerformed
        // TODO add your handling code here:
        OrdenEmociones.setText(props.getProperty(PruebaTipo.getSelectedItem().toString()).replace("%", "-"));
    }//GEN-LAST:event_PruebaTipoActionPerformed

    private void CreateFileVolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateFileVolActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_CreateFileVolActionPerformed

    private void cargarUsuarios() throws Exception {
        Connection dbCon = conDB.dbConexion(MSSQL_DRIVER, MSSQL_JDBC_URL, MSSQL_USERNAME,
                MSSQL_PASSWORD, MSSQL_SCHEMA);
        ArrayList<String> listaVol = conDB.listaNombres(dbCon);
        Voluntario.setModel(new DefaultComboBoxModel(listaVol.toArray()));
    }

    private void newUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newUserActionPerformed
        try {
            //se crea un nuevo usuario dentro de la base de datos
            int ingresoVol = 0;
            Connection dbCon = conDB.dbConexion(MSSQL_DRIVER, MSSQL_JDBC_URL, MSSQL_USERNAME,
                    MSSQL_PASSWORD, MSSQL_SCHEMA);
            ingresoVol = conDB.insertarUsuario(dbCon);
            if (ingresoVol > 0) {
                cargarUsuarios();
            } else {
                JOptionPane.showMessageDialog(null, "No se ha insertado un nuevo usuario");
            }
        } catch (Exception ex) {
            Logger.getLogger(Window.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_newUserActionPerformed

    private void VoluntarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VoluntarioActionPerformed
        // TODO add your handling code here:
        cambioVol = true;
        ensayo = 1;
        StartStop.setText(props.getProperty("textoBoton") + String.valueOf(ensayo));
    }//GEN-LAST:event_VoluntarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateChunksAuBT;
    private javax.swing.JButton CreateFileVol;
    private javax.swing.JButton ExcelExport;
    private javax.swing.JLabel OrdenEmociones;
    private javax.swing.JComboBox PruebaTipo;
    private javax.swing.JButton StartStop;
    private javax.swing.JButton TableClean;
    private javax.swing.JComboBox Voluntario;
    private javax.swing.JScrollPane emgScrollPane;
    private javax.swing.JTable emgTable;
    private javax.swing.JScrollPane gsrScrollPane;
    private javax.swing.JTable gsrTable;
    private javax.swing.JButton newUser;
    // End of variables declaration//GEN-END:variables
}
